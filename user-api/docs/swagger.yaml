basePath: /api/v1
definitions:
  models.Account:
    properties:
      email:
        example: hvthong@gmail.com
        maxLength: 255
        type: string
      password:
        example: User Password
        type: string
      userName:
        example: vanthong
        maxLength: 64
        type: string
    required:
    - email
    - password
    - userName
    type: object
  models.Action:
    properties:
      actionname:
        type: string
      actionurl:
        type: string
    type: object
  models.Address:
    properties:
      city:
        type: string
      country:
        type: string
      district:
        type: string
      street:
        type: string
      ward:
        type: string
      zip:
        type: string
    type: object
  models.LoginAttempt:
    properties:
      accountname:
        description: define account name is not correct with user id
        type: string
      browertype:
        type: string
      createdate:
        type: string
      ipnumber:
        type: string
      password:
        type: string
      success:
        type: string
    type: object
  models.Profile:
    properties:
      addresses:
        description: a person can have a home and cottage...
        items:
          $ref: '#/definitions/models.Address'
        type: array
      age:
        example: 30
        maximum: 130
        minimum: 0
        type: integer
      defaultprofile:
        type: string
      email:
        example: example@gmail.com
        type: string
      emailverified:
        example: true
        type: boolean
      favouritecolor:
        description: alias for 'hexcolor|rgb|rgba|hsl|hsla'
        example: '#0003'
        type: string
      firstname:
        example: John
        type: string
      gender:
        example: male
        type: string
      id:
        example: 5bbdadf782ebac06a695a8e7
        type: string
      lastname:
        example: Switch
        type: string
      phonenumber:
        type: string
      picture:
        example: link to picture
        type: string
      profilename:
        type: string
      userid:
        example: 5bbdadf782ebac06a695a8e7
        type: string
    required:
    - email
    - firstname
    - userid
    type: object
  models.Role:
    properties:
      actions:
        items:
          $ref: '#/definitions/models.Action'
        type: array
      rolename:
        type: string
      rolenote:
        type: string
    type: object
  models.User:
    properties:
      activated:
        type: boolean
      email:
        type: string
      id:
        example: 5bbdadf782ebac06a695a8e7
        type: string
      loginattempts:
        items:
          $ref: '#/definitions/models.LoginAttempt'
        type: array
      password:
        example: raycad
        type: string
      role:
        $ref: '#/definitions/models.Role'
      username:
        example: hvthong
        type: string
    required:
    - email
    type: object
  payload.Error:
    properties:
      code:
        example: 27
        type: integer
      message:
        example: Error message
        type: string
    type: object
  payload.Message:
    properties:
      message:
        example: message
        type: string
    type: object
  security.Token:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoicmF5Y2FkIiwicm9sZSI6IiIsImV4cCI6MTUzOTI0OTc3OSwiaXNzIjoic2VlZG90ZWNoIn0.lVHq8J_0vfvECbplogAOCDCNh63ivTBOhya8KE6Ew_E
        type: string
    type: object
host: 127.0.0.1:8808
info:
  contact: {}
  description: List APIs of UserManagement Service
  termsOfService: http://swagger.io/terms/
  title: UserManagement Service API Document
  version: "1.0"
paths:
  /admin/auth:
    get:
      consumes:
      - application/json
      description: Authenticate google user
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/security.Token'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/payload.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.Error'
      security:
      - ApiKeyAuth: []
      summary: Check user authentication
      tags:
      - admin
  /admin/auth/signin:
    post:
      consumes:
      - multipart/form-data
      description: Authenticate user
      parameters:
      - description: Username
        in: formData
        name: user
        required: true
        type: string
      - description: Email
        in: formData
        name: email
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/security.Token'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/payload.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.Error'
      security:
      - ApiKeyAuth: []
      summary: Check user authentication
      tags:
      - admin
  /admin/auth/social:
    get:
      consumes:
      - application/json
      description: get token for redirect to sign in google service
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/security.Token'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/payload.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.Error'
      security:
      - ApiKeyAuth: []
      summary: Check token for accessing google account
      tags:
      - admin
  /profile:
    patch:
      consumes:
      - application/json
      description: Update an existing profile user
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/models.Profile'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.Error'
      summary: Update an existing profile user
      tags:
      - profile
    post:
      consumes:
      - application/json
      description: Update profile user
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Add profile user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.Profile'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/payload.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.Error'
      summary: Add a profile for user
      tags:
      - profile
  /profile/{userid}:
    delete:
      consumes:
      - application/json
      description: Delete a user profile by UserID
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: userid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.Error'
      summary: Delete a user profile by UserID
      tags:
      - profile
    get:
      consumes:
      - application/json
      description: Profile user
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: userid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Profile'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.Error'
      summary: Get a profile user by userid
      tags:
      - profile
  /profile/list:
    get:
      consumes:
      - application/json
      description: List all existing user profiles
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Profile'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.Error'
      summary: List all existing user profiles
      tags:
      - profile
  /users:
    get:
      consumes:
      - application/json
      description: Get a user by ID parameter
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.Error'
      summary: Get a user by ID parameter
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: Update an existing user
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.Error'
      summary: Update an existing user
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Add a new user
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Add user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.Account'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/payload.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.Error'
      summary: Add a new user
      tags:
      - user
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.Error'
      summary: Delete a user by ID
      tags:
      - user
  /users/changepassword:
    patch:
      consumes:
      - application/json
      description: Change password of user from the old password
      parameters:
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.Error'
      summary: Change password
      tags:
      - user
  /users/detail/{id}:
    get:
      consumes:
      - application/json
      description: Get a user by ID
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.Error'
      summary: Get a user by ID
      tags:
      - user
  /users/list:
    get:
      consumes:
      - application/json
      description: List all existing users
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.Error'
      summary: List all existing users
      tags:
      - user
swagger: "2.0"
