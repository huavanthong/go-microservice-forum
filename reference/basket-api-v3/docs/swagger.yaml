basePath: /api/v3
definitions:
  models.Brand:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.Category:
    properties:
      ccode:
        example: c1000
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        example: Ao khoac thoi trang cho nu
        type: string
      id:
        example: 5bbdadf782ebac06a695a8e7
        type: string
      name:
        example: ao-khoac-nu
        type: string
      subcategory:
        items:
          $ref: '#/definitions/models.SubCategory'
        type: array
      updated_at:
        type: string
    required:
    - ccode
    - name
    type: object
  models.Discount:
    properties:
      active:
        type: boolean
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      discountpercent:
        type: number
      id:
        example: 5bbdadf782ebac06a695a8e7
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.Inventory:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        example: 5bbdadf782ebac06a695a8e7
        type: string
      quantity:
        type: integer
      updated_at:
        type: string
    type: object
  models.Product:
    properties:
      brand:
        $ref: '#/definitions/models.Brand'
      category:
        $ref: '#/definitions/models.Category'
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        example: Iphone 14 Pro Gold 256GB
        type: string
      discount:
        $ref: '#/definitions/models.Discount'
      id:
        example: 5bbdadf782ebac06a695a8e7
        type: string
      imageFile:
        example: default.png
        type: string
      inventory:
        $ref: '#/definitions/models.Inventory'
      name:
        example: Iphone 14 Pro
        type: string
      pcode:
        example: p123456789
        type: string
      price:
        example: 1400
        minimum: 0.01
        type: number
      ptype:
        example: phone
        type: string
      sku:
        example: ABC-XYZ-OXY
        type: string
      summary:
        example: Iphone 14 Pro Gold
        type: string
      updated_at:
        type: string
    required:
    - brand
    - category
    - description
    - discount
    - imageFile
    - inventory
    - name
    - pcode
    - price
    - ptype
    - summary
    type: object
  models.SubCategory:
    properties:
      categorytype:
        example: 1
        type: integer
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        example: Ao khoac chong nang cho nu
        type: string
      name:
        example: ao-khoac-chong-nang-nu
        type: string
      updated_at:
        type: string
    type: object
  payload.GetCategorySuccess:
    properties:
      code:
        example: 201
        type: integer
      data:
        $ref: '#/definitions/models.Category'
      message:
        example: Get category success
        type: string
      status:
        example: success
        type: string
    type: object
  payload.GetProductSuccess:
    properties:
      code:
        example: 201
        type: integer
      data:
        $ref: '#/definitions/models.Product'
      message:
        example: Get product success
        type: string
      status:
        example: success
        type: string
    type: object
  payload.RequestCreateCategory:
    properties:
      description:
        example: products relalated to phone category
        type: string
      name:
        example: phone
        type: string
      subcategory:
        type: string
    required:
    - description
    - name
    - subcategory
    type: object
  payload.RequestCreateProduct:
    properties:
      category:
        example: dien thoai
        type: string
      description:
        example: Iphone 14 Pro Gold 256GB
        type: string
      imageFile:
        example: default.png
        type: string
      name:
        example: Iphone 14 Pro
        type: string
      price:
        example: 1400
        minimum: 0.01
        type: number
      producttype:
        example: phone
        type: string
      summary:
        example: Iphone 14 Pro Gold
        type: string
    required:
    - category
    - description
    - imageFile
    - name
    - price
    - producttype
    - summary
    type: object
  payload.RequestUpdateProduct:
    properties:
      category:
        type: string
      description:
        example: Iphone 14 Pro Gold 256GB
        type: string
      imageFile:
        example: default.png
        type: string
      name:
        example: Iphone 14 Pro
        type: string
      price:
        example: 1400
        minimum: 0.01
        type: number
      summary:
        example: Iphone 14 Pro Gold
        type: string
    required:
    - category
    - description
    - imageFile
    - name
    - price
    - summary
    type: object
  payload.Response:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: Error message
        type: string
      status:
        example: failed
        type: string
    type: object
host: localhost:9090
info:
  contact: {}
  description: List APIs of UserManagement Service
  termsOfService: http://swagger.io/terms/
  title: UserManagement Service API Document
  version: "1.0"
paths:
  /category:
    get:
      consumes:
      - application/json
      description: List all existing categories of store
      parameters:
      - description: Page
        in: path
        name: page
        required: true
        type: string
      - description: Limit
        in: path
        name: limit
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.Response'
      summary: List all existing categories
      tags:
      - category
  /category/:
    post:
      consumes:
      - application/json
      description: Admin create a new category to storage
      parameters:
      - description: New Category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/payload.RequestCreateCategory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.GetCategorySuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/payload.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/payload.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a new category
      tags:
      - category
  /category/{id}:
    delete:
      consumes:
      - application/json
      description: User delete the category by category ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/payload.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/payload.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/payload.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a category by ID
      tags:
      - category
    get:
      consumes:
      - application/json
      description: Get an category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.GetCategorySuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/payload.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/payload.Response'
      summary: Get an category by ID
      tags:
      - category
    patch:
      consumes:
      - application/json
      description: User update category info
      parameters:
      - description: Update post
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/payload.RequestUpdateProduct'
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/payload.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/payload.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a category
      tags:
      - category
  /category/name/{name}:
    get:
      consumes:
      - application/json
      description: Get category by name
      parameters:
      - description: Name of Category
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.GetProductSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/payload.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/payload.Response'
      security:
      - ApiKeyAuth: []
      summary: Get category by name
      tags:
      - category
  /products:
    get:
      consumes:
      - application/json
      description: List all existing products of store
      parameters:
      - description: Page
        in: path
        name: page
        required: true
        type: string
      - description: Limit
        in: path
        name: limit
        required: true
        type: string
      - description: Currency
        in: path
        name: currency
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.Response'
      summary: List all existing products
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: User delete the product by product ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/payload.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/payload.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/payload.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a post by ID
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Currency
        in: path
        name: currency
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.GetProductSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/payload.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/payload.Response'
      summary: Get a product by ID
      tags:
      - products
    patch:
      consumes:
      - application/json
      description: User update product info
      parameters:
      - description: Update post
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/payload.RequestUpdateProduct'
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/payload.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/payload.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a product
      tags:
      - products
  /products/{productType}:
    post:
      consumes:
      - application/json
      description: User create a product
      parameters:
      - description: New Product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/payload.RequestCreateProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.GetProductSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/payload.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/payload.Response'
      security:
      - ApiKeyAuth: []
      summary: Create a product
      tags:
      - products
  /products/category/{category}:
    get:
      consumes:
      - application/json
      description: Get product by Category
      parameters:
      - description: Category
        in: path
        name: category
        required: true
        type: string
      - description: Currency
        in: query
        name: currency
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.GetProductSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/payload.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/payload.Response'
      security:
      - ApiKeyAuth: []
      summary: Get product by Category
      tags:
      - products
  /products/name/{name}:
    get:
      consumes:
      - application/json
      description: Get product by name
      parameters:
      - description: Name of Product
        in: path
        name: name
        required: true
        type: string
      - description: Currency
        in: query
        name: currency
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.GetProductSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/payload.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/payload.Response'
      security:
      - ApiKeyAuth: []
      summary: Get product by name
      tags:
      - products
swagger: "2.0"
