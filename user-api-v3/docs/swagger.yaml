basePath: /api/v3
definitions:
  models.CreatePostRequest:
    properties:
      content:
        example: The post tutorial with Golang
        type: string
      image:
        example: default.png
        type: string
      title:
        example: My post
        type: string
      user:
        example: 5bbdadf782ebac06a695a8e7
        type: string
    required:
    - content
    - title
    - user
    type: object
  models.ForgotPasswordInput:
    properties:
      email:
        example: johndoe@gmail.com
        type: string
    required:
    - email
    type: object
  models.PostResponse:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      image:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user:
        type: string
    type: object
  models.ResetPasswordInput:
    properties:
      password:
        example: password1234
        type: string
      passwordConfirm:
        example: password1234
        type: string
    required:
    - password
    - passwordConfirm
    type: object
  models.SignInInput:
    properties:
      email:
        example: johndoe@gmail.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  models.SignUpInput:
    properties:
      email:
        example: johndoe@gmail.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: password123
        minLength: 8
        type: string
      passwordConfirm:
        example: password123
        type: string
    required:
    - email
    - name
    - password
    - passwordConfirm
    type: object
  models.UpdatePost:
    properties:
      content:
        example: The post tutorial with Golang + Gin
        type: string
      id:
        example: 5bbdadf782ebac06a695a8a2
        type: string
      image:
        example: default.png
        type: string
      title:
        example: My post update
        type: string
      user:
        example: 5bbdadf782ebac06a695a8e7
        type: string
    type: object
  models.UserResponse:
    properties:
      created_at:
        type: string
      email:
        example: johndoe@gmail.com
        type: string
      id:
        example: 5bbdadf782ebac06a695a8e7
        type: string
      name:
        example: John Doe
        type: string
      photo:
        example: http://www.golangprograms.com/skin/frontend/base/default/logo.png
        type: string
      provider:
        example: google oauth2
        type: string
      role:
        example: user
        type: string
      updated_at:
        type: string
    type: object
  payload.CreatePostSuccess:
    properties:
      code:
        example: 201
        type: integer
      data:
        $ref: '#/definitions/models.PostResponse'
      message:
        example: Create a new post success
        type: string
      status:
        example: success
        type: string
    type: object
  payload.Response:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: Error message
        type: string
      status:
        example: failed
        type: string
    type: object
  payload.UserLoginSuccess:
    properties:
      access_token:
        example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NTc0NTg2NzcsImlhdCI6MTY1NzQ1Nzc3NywibmJmIjoxNjU3NDU3Nzc3LCJzdWIiOiIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAifQ.WbRHMAdggCfHR06XKpmbFCu3DNjPkjOPYs9b8TuvBZym1d_TD7JCMadmNCq_Sim9bOzhMi8muDZBb1wRBkli2A
        type: string
      message:
        example: Generate token success
        type: string
      status:
        example: success
        type: string
    type: object
  payload.UserRefreshTokenSuccess:
    properties:
      access_token:
        example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NTc0NTg2NzcsImlhdCI6MTY1NzQ1Nzc3NywibmJmIjoxNjU3NDU3Nzc3LCJzdWIiOiIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAifQ.WbRHMAdggCfHR06XKpmbFCu3DNjPkjOPYs9b8TuvBZym1d_TD7JCMadmNCq_Sim9bOzhMi8muDZBb1wRBkli2A
        type: string
      message:
        example: Refresh token success
        type: string
      status:
        example: success
        type: string
    type: object
  payload.UserRegisterSuccess:
    properties:
      code:
        example: 201
        type: integer
      data:
        $ref: '#/definitions/models.UserResponse'
      message:
        example: Register a new user successfully
        type: string
      status:
        example: success
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: List APIs of UserManagement Service
  termsOfService: http://swagger.io/terms/
  title: UserManagement Service API Document
  version: "1.0"
paths:
  /auth/forgotpassword/:
    post:
      consumes:
      - application/json
      description: User forgot password
      parameters:
      - description: Confirm forget password
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/models.ForgotPasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/payload.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/payload.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/payload.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/payload.Response'
      security:
      - ApiKeyAuth: []
      summary: Forgot password
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: User sign in to service
      parameters:
      - description: Authenticate user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.SignInInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.UserLoginSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/payload.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/payload.Response'
      security:
      - ApiKeyAuth: []
      summary: Sign In User
      tags:
      - auth
  /auth/logout:
    get:
      consumes:
      - application/json
      description: Delete all cookie in session
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Log out user
      tags:
      - auth
  /auth/refresh:
    get:
      consumes:
      - application/json
      description: Refresh access token after the specific time
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.UserRefreshTokenSuccess'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/payload.Response'
      security:
      - ApiKeyAuth: []
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user for service
      parameters:
      - description: New User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.SignUpInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/payload.UserRegisterSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/payload.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/payload.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/payload.Response'
      security:
      - ApiKeyAuth: []
      summary: Register a new user
      tags:
      - auth
  /auth/resetpassword/{resetToken}:
    patch:
      consumes:
      - application/json
      description: Validate the reset token and update the userâ€™s password
      parameters:
      - description: New password
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordInput'
      - description: reset password
        in: path
        name: resetToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/payload.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/payload.Response'
      security:
      - ApiKeyAuth: []
      summary: Reset password
      tags:
      - auth
  /auth/verifyemail/{verificationCode}:
    get:
      consumes:
      - application/json
      description: Verify email user that sign up to service
      parameters:
      - description: Verification Code
        in: path
        name: verificationCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "209":
          description: ""
          schema:
            $ref: '#/definitions/payload.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/payload.Response'
      security:
      - ApiKeyAuth: []
      summary: Verify email user
      tags:
      - auth
  /posts:
    post:
      consumes:
      - application/json
      description: User create a new post for topic
      parameters:
      - description: New Post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.CreatePostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/payload.CreatePostSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/payload.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/payload.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/payload.Response'
      security:
      - ApiKeyAuth: []
      summary: Creates a new post
      tags:
      - posts
  /posts/:
    get:
      consumes:
      - application/json
      description: User delete the post by postId
      parameters:
      - description: Post ID
        in: path
        name: page
        required: true
        type: string
      - description: Post ID
        in: path
        name: limit
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/payload.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/payload.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/payload.Response'
      security:
      - ApiKeyAuth: []
      summary: Retrieve all posts
      tags:
      - posts
  /posts/{postId}:
    delete:
      consumes:
      - application/json
      description: User delete the post by postId
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/payload.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/payload.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/payload.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: User find the post by postId
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/payload.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/payload.Response'
      security:
      - ApiKeyAuth: []
      summary: Retrieve a single post
      tags:
      - posts
    patch:
      consumes:
      - application/json
      description: User update the exist post
      parameters:
      - description: Update post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePost'
      - description: Post ID
        in: path
        name: postId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/payload.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/payload.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a post
      tags:
      - posts
  /sessions/oauth/google:
    get:
      consumes:
      - application/json
      description: Sign in a new user by Google OAtuth2, then save a new user to DB
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "307":
          description: Temporary Redirect
          schema:
            $ref: '#/definitions/payload.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/payload.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/payload.Response'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/payload.Response'
      security:
      - ApiKeyAuth: []
      summary: Sign in a new user by Google OAuth2
      tags:
      - auth
  /users/{email}}:
    get:
      consumes:
      - application/json
      description: User find another user by email
      parameters:
      - description: Email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.UserRegisterSuccess'
      security:
      - ApiKeyAuth: []
      summary: Get user by Email
      tags:
      - users
  /users/{userId}}:
    get:
      consumes:
      - application/json
      description: User find another user by ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.UserRegisterSuccess'
      security:
      - ApiKeyAuth: []
      summary: Get user by ID
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: Get the current user info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.UserRegisterSuccess'
      security:
      - ApiKeyAuth: []
      summary: Get the current user info
      tags:
      - users
swagger: "2.0"
