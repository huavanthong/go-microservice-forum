name: Microservice Golang

on: 
  push:
    branches: [ "basket-service" ]
    tags:
      - "*.*.*"
      
  pull_request:
    types:
      - closed
      - opened
      - synchronize
    branches: [ "master" ]

  workflow_dispatch:

  repository_dispatch:
    types:
      - Trigger Workflow

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  trigger-microservice:
    runs-on: ubuntu-latest
    name: Extract Data
    if: github.event.action == 'Trigger Workflow'
    outputs:
      repository: ${{ steps.extract_data.outputs.REPOSITORY }}
      branch: ${{ steps.extract_data.outputs.PULL_MERGE_BRANCH }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Extract Data
        id: extract_data
        run: |
          echo "This step runs when 'Trigger Workflow' is dispatched"
          # Trích xuất giá trị "repository" từ JSON payload
          repository=$(jq -r .client_payload.repository $GITHUB_EVENT_PATH)
          branch=$(jq -r .client_payload.branch $GITHUB_EVENT_PATH)
          echo "Geting value: repository: $repository and branch: $branch"
          echo "REPOSITORY=${repository#huavanthong/}"  >> "$GITHUB_OUTPUT"
          echo "PULL_MERGE_BRANCH=$branch"  >> "$GITHUB_OUTPUT"
          ls -la

      # - name: Wait for Repository B Pipeline
      #   id: wait-for-pipeline
      #   uses: actions/wait-for-pipeline@v1
      #   with:
      #     repository: huavanthong/CircleCI  # Thay thế bằng thông tin Repository B
      #     ref: main  # Thay thế bằng nhánh bạn muốn kiểm tra
      #     access-token: ${{ secrets.GITHUB_TOKEN }}
        
  build-linux:
    name: Build Basket Linux
    runs-on: ubuntu-latest
    needs: trigger-microservice
    if: ${{ ! failure() && ! cancelled() }}
    steps:
      - name: Display Event Data
        run: |
          echo "Event data:"
          cat $GITHUB_EVENT_PATH
          echo "Output from Extract Data: $REPOSITORY"
          echo "Output from Extract Data: $PULL_MERGE_BRANCH"
     
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.17

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: basket-service

      - name: Set working directory
        run: |
          ls -al
          REPOSITORY="${{needs.trigger-microservice.outputs.repository}}"
          PULL_MERGE_BRANCH="${{needs.trigger-microservice.outputs.branch}}"
          echo "$REPOSITORY $PULL_MERGE_BRANCH"
          chmod +x update_repos.sh
          ./update_repos.sh

          cd ./src/Services/Basket
          ls -al
          # Cat output file
          cat output.txt
          # Save log to a file
          echo "${{ steps.step_name.outputs.result }}" > mylog.txt
          ls -al
          echo $PWD
          cat mylog.txt

      - name: Upload Log Artifact
        uses: actions/upload-artifact@v2
        with:
          name: log-artifact
          path: ${{ runner.workspace }}/microservice-golang/src/Services/Basket/mylog.txt

      - name: Fetch required Go modules
        run:  go mod download

      - name: Build
        run:
          go build -o basket-api .\cmd\basket-api\main.go

      - name: Test
        run: go test -v ./...

      - name: Build and Push Docker Image
        id:   docker_build
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  download-logs:
    runs-on: ubuntu-latest
    needs: [ build-linux , build-windows ]
    if: always() 
    steps:
      - name: Download logs
        run: |
          RUN_ID=${GITHUB_RUN_ID}
          echo "Job ID from job1: $JOB1_JOB_ID"

          jobs=$(gh api repos/huavanthong/microservice-golang/actions/runs/6146222982/jobs --jq '.jobs[] | select(.name | test("(^Build|^Test)")) | {name, id}')
          
          for job in $jobs; do
            name=$(echo $job | jq -r '.name')
            id=$(echo $job | jq -r '.id')
            echo "Job Name: $name"
            echo "Job ID: $id"
            gh run view $RUN_ID --job $id --log >> new_log.txt
          done

          cat new_log.txt

  build-windows:
    name: Build Basket Window
    runs-on: windows-latest
    needs: trigger-microservice
    if: ${{ ! failure() && ! cancelled() }}
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.17

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: basket-service

      - name: Set working directory
        run: |
          cd ./src/Services/Basket
          dir

      - name: Fetch required Go modules
        run:  go mod download

      - name: Build
        run:  go build -o basket-api.exe .\cmd\basket-api\main.go

      - name: Test
        run: go test -v .\test\internal\domain\repositories\Basket.repository_test.go

      - name: Build and Push Docker Image
        id:   docker_build
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
      
  download-logs-windows:
    runs-on: windows-latest
    needs: build-windows
    steps:
      - name: Download logs
        run: |
          SET RUN_ID=%GITHUB_RUN_ID%
          gh run download %RUN_ID%
